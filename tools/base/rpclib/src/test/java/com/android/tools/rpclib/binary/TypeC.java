/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.rpclib.binary;

import com.android.tools.rpclib.schema.Entity;
import com.android.tools.rpclib.schema.Field;
import com.android.tools.rpclib.schema.Method;
import com.android.tools.rpclib.schema.Primitive;
import org.jetbrains.annotations.NotNull;

import com.android.tools.rpclib.binary.BinaryClass;
import com.android.tools.rpclib.binary.BinaryID;
import com.android.tools.rpclib.binary.BinaryObject;
import com.android.tools.rpclib.binary.Decoder;
import com.android.tools.rpclib.binary.Encoder;
import com.android.tools.rpclib.binary.Namespace;

import java.io.IOException;

public final class TypeC implements BinaryObject {
    //<<<Start:Java.ClassBody:1>>>
    private Simple mData;

    // Constructs a default-initialized {@link TypeC}.
    public TypeC() {}


    public Simple getData() {
        return mData;
    }

    public TypeC setData(Simple v) {
        mData = v;
        return this;
    }

    @Override @NotNull
    public BinaryClass klass() { return Klass.INSTANCE; }


    private static final Entity ENTITY = new Entity("test", "TypeC", "", "");

    static {
        ENTITY.setFields(new Field[]{
            new Field("Data", new Primitive("Simple", Method.Int8)),
        });
        Namespace.register(Klass.INSTANCE);
    }
    public static void register() {}
    //<<<End:Java.ClassBody:1>>>
    public enum Klass implements BinaryClass {
        //<<<Start:Java.KlassBody:2>>>
        INSTANCE;

        @Override @NotNull
        public Entity entity() { return ENTITY; }

        @Override @NotNull
        public BinaryObject create() { return new TypeC(); }

        @Override
        public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
            TypeC o = (TypeC)obj;
            o.mData.encode(e);
        }

        @Override
        public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
            TypeC o = (TypeC)obj;
            o.mData = Simple.decode(d);
        }
        //<<<End:Java.KlassBody:2>>>
    }
}
